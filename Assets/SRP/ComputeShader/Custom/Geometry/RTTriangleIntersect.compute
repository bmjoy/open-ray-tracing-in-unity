#ifndef RTTriangle_Intersect_COMPUTE
#define RTTriangle_Intersect_COMPUTE

// [intersect(RTTriangleIntersect)]
void RTTriangleIntersect(Ray ray, inout RayHit bestHit, Primitive primitive, int primitiveId)
{
    // (1) Here we try to intersect the plane equation of the triangle with the ray and see if there is intersect
    // (2) If there is intersection, calculate the Barycentric coordinates
    
    // (1a) Plane equation <-- Ray equation: dot(n, P) x d = 0 <-- o + tD = P
    // (1b) dot(n, o + tD) + d = 0
    // (1c) dot(n, o) + dot(n, tD) = - d
    // (1d) dot(n, tD) = - d - dot(n, o)
    // (1e) t = - (d + dot(n, o)) / dot(n, D)
    // Here, we need to check |dot(n, D)| < float.Epsilon
    
    // if(tri.area < Epsilon)
    // {
    //     return;     // The triangle does not exists
    // }

    float Epsilon = 1.19e-07f;

    for(int s = 0; s < primitive.geometryInstanceCount; s++)
    {
        RTTriangle tri = _Triangles[primitive.geometryInstanceBegin + s];
        
        float nDotD = dot(tri.normal, ray.direction);
        if(abs(nDotD) < Epsilon)
        {
            continue;     // The support plane is parallel to the ray, no intersection
        }
        float nDotO = dot(tri.normal, ray.origin);
        float t = -1 * (tri.planeD + nDotO) / nDotD;
        
        // (2a) If the hit distance is negative or farther the bestHit, drop
        // (2b) Calculate the hit point coordinates
        // (2c) Determine if the hit point is on the L.H.S of the triangle edges
        // (2d) If hit point is within triangle, update bestHit
        
        if(t < 0 || t > bestHit.distance)
        {
            continue;
        }
        
        float3 hit = ray.origin + t * ray.direction;
        
        float3 vAQ = hit - tri.vertices[0];
        float3 vBQ = hit - tri.vertices[1];
        float areaABQ = dot(cross(tri.vertices[1] - tri.vertices[0], vAQ), tri.normal);
        if(areaABQ < 0)
        {
            continue;     // Is on the R.H.S
        }
        float areaBCQ = dot(cross(tri.vertices[2] - tri.vertices[1], vBQ), tri.normal);
        if(areaBCQ < 0)
        {
            continue;     // Is on the R.H.S
        }
        float areaAQC = dot(cross(vAQ, tri.vertices[2] - tri.vertices[0]), tri.normal);
        if(areaAQC < 0)
        {
            continue;     // Is on the R.H.S
        }
        
        bestHit.barycentric = float3(areaABQ / tri.area, areaBCQ / tri.area, areaAQC / tri.area);
        bestHit.position = hit;
        bestHit.distance = t;
        bestHit.primitiveId = primitiveId;

        if(nDotD > 0)
        {
            bestHit.normal = -tri.normal;
        }
        else
        {
            bestHit.normal = tri.normal;
        }
    }
}

#endif