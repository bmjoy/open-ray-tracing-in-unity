#ifndef Translucent_COMPUTE
#define Translucent_COMPUTE

float TranslucentMat_reflectivity;
float TranslucentMat_secondaryRayEffect;
float TranslucentMat_transparency;

// [shader(Translucent)]
void Translucent_SecRays(
    inout Ray ray,
    RayHit hit,
    inout SecRaysAtHit secRaysAtHit
) 
{
    if (ray.gen <= 1) {
        return;
    }

    // Reflective
    secRaysAtHit.srays[0].origin = hit.position;
    secRaysAtHit.srays[0].direction = normalize(reflect(ray.direction, hit.normal));
    secRaysAtHit.srays[0].color = float3(0, 0, 0);
    secRaysAtHit.srays[0].gen = ray.gen - 1;
    secRaysAtHit.srays[0].tmin = 0.01f;
    secRaysAtHit.srays[0].weight = TranslucentMat_reflectivity;

    // Translucent
    secRaysAtHit.srays[1].origin = hit.position;
    secRaysAtHit.srays[1].direction = ray.direction;
    secRaysAtHit.srays[1].color = float3(0, 0, 0);
    secRaysAtHit.srays[1].gen = ray.gen - 1;
    secRaysAtHit.srays[1].tmin = 0.01f;
    secRaysAtHit.srays[1].weight = TranslucentMat_transparency;
}

float3 Translucent(
   inout Ray ray,
   RayHit hit,
   float3 ambientLightUpper,
   float3 secondaryRayColor
)
{
    float3 color = float3(0, 0, 0);

    for(int l = 0; l < _NumOfLights; l++)
    {
        LightHit light0 = GetIlluminate(hit.position, hit.primitiveId, l);

        float nDotL = dot(hit.normal, -1 * light0.direction);
        if (nDotL >= 0)
        {
            color += light0.color * nDotL;
        }
    }

    return (1 - TranslucentMat_secondaryRayEffect) * color + TranslucentMat_secondaryRayEffect * secondaryRayColor;
}

#endif // Reflective_COMPUTE 