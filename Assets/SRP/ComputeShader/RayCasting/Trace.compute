#ifndef TRACE_COMPUTE
#define TRACE_COMPUTE

#include "../Ray.compute"
#include "../RayHit.compute"
#include "../BVH/RayBoxIntersect.compute"

RayHit Trace(Ray ray, int _NumOfPrimitive)
{
    RayHit bestHit = CreateRayHit();

    // Sometimes, tmin == 0 when people want to do refraction
    if (ray.tmin < 0) {
        return bestHit;
    }

    int bvhStack[32];
    bvhStack[0] = 0;
    int bvhHead = 0;
    [fastopt] while (true)
    {
        if (bvhHead <= -1) {
            // No more node to traverse
            break;
        }

        int nodeIdx = bvhStack[bvhHead];
        bvhHead--;

        if (RayBoxIntersection(ray, _BVHTree[nodeIdx].min, _BVHTree[nodeIdx].max)) {
            if (_BVHTree[nodeIdx].leftIdx == 0 && _BVHTree[nodeIdx].rightIdx == 0) {
                // Leaf node
                [fastopt] for(int p = 0; p < _BVHTree[nodeIdx].primitiveCount; p++)
                {
                    IntersectByGeometry(ray, bestHit, _BVHTree[nodeIdx].primitiveBegin + p);
                }
            }
            else
            {
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].rightIdx;
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].leftIdx;
            }
        }
    }
    
    return bestHit;
}

bool ShadowTrace(Ray ray, int originPrimitiveId)
{
    RayHit bestHit = CreateRayHit();
        
    int bvhStack[32];
    bvhStack[0] = 0;
    int bvhHead = 0;
    [fastopt] while (true)
    {
        if (bvhHead <= -1) {
            // No more node to traverse
            return false;
        }

        int nodeIdx = bvhStack[bvhHead];
        bvhHead--;

        if (RayBoxIntersection(ray, _BVHTree[nodeIdx].min, _BVHTree[nodeIdx].max)) {
            if (_BVHTree[nodeIdx].leftIdx == 0 && _BVHTree[nodeIdx].rightIdx == 0) {
                // Leaf node
                [fastopt] for(int p = 0; p < _BVHTree[nodeIdx].primitiveCount; p++)
                {
                    IntersectByGeometry(ray, bestHit, _BVHTree[nodeIdx].primitiveBegin + p);
                    // It hit something and it is not the origin primitive, the light is blocked
                    if (bestHit.primitiveId != -1 && bestHit.primitiveId != originPrimitiveId) {
                        return true;
                    }
                }
            }
            else
            {
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].rightIdx;
                bvhHead++;
                bvhStack[bvhHead] = _BVHTree[nodeIdx].leftIdx;
            }
        }
    }

    return false;
} 

#endif //TRACE_COMPUTE